// <auto-generated />
using System;
using BookStore.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Api.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    partial class BookStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Api.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("BookStore.Api.Models.Area", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("AreaId"));

                    b.Property<string>("Keywords")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("keywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("AreaId");

                    b.ToTable("area");
                });

            modelBuilder.Entity("BookStore.Api.Models.Author", b =>
                {
                    b.Property<long>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("AuthorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.HasKey("AuthorId");

                    b.ToTable("author");
                });

            modelBuilder.Entity("BookStore.Api.Models.AuthorBook", b =>
                {
                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.HasKey("AuthorId", "Isbn");

                    b.HasIndex("Isbn");

                    b.ToTable("author_book");
                });

            modelBuilder.Entity("BookStore.Api.Models.Book", b =>
                {
                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("average_price");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image_url");

                    b.Property<int>("PageCount")
                        .HasColumnType("int")
                        .HasColumnName("page_count");

                    b.Property<int>("PublishYear")
                        .HasColumnType("int")
                        .HasColumnName("publish_year");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Isbn");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("book", t =>
                        {
                            t.HasCheckConstraint("book_chk_1", "page_count > 0");

                            t.HasCheckConstraint("book_chk_2", "average_price >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.BookPromotion", b =>
                {
                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<long>("PromotionId")
                        .HasColumnType("bigint")
                        .HasColumnName("promotion_id");

                    b.HasKey("Isbn", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("book_promotion");
                });

            modelBuilder.Entity("BookStore.Api.Models.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("BookStore.Api.Models.CartItem", b =>
                {
                    b.Property<long>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cart_item_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CartItemId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("added_at");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("Isbn");

                    b.ToTable("cart_item", null, t =>
                        {
                            t.HasCheckConstraint("cart_item_chk_1", "quantity > 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("category");
                });

            modelBuilder.Entity("BookStore.Api.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("BookStore.Api.Models.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("DepartmentId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("BookStore.Api.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("BookStore.Api.Models.EmployeeArea", b =>
                {
                    b.Property<long>("EmployeeAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("employee_area_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("EmployeeAreaId"));

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_at");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.HasKey("EmployeeAreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmployeeId", "AreaId")
                        .IsUnique();

                    b.ToTable("employee_area");
                });

            modelBuilder.Entity("BookStore.Api.Models.GoodsReceipt", b =>
                {
                    b.Property<long>("GrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("gr_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("GrId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<long>("PoId")
                        .HasColumnType("bigint")
                        .HasColumnName("po_id");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("received_at");

                    b.HasKey("GrId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PoId");

                    b.ToTable("goods_receipt");
                });

            modelBuilder.Entity("BookStore.Api.Models.GoodsReceiptLine", b =>
                {
                    b.Property<long>("GrLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("gr_line_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("GrLineId"));

                    b.Property<long>("GrId")
                        .HasColumnType("bigint")
                        .HasColumnName("gr_id");

                    b.Property<int>("QtyReceived")
                        .HasColumnType("int")
                        .HasColumnName("qty_received");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_cost");

                    b.HasKey("GrLineId");

                    b.HasIndex("GrId");

                    b.ToTable("goods_receipt_line", t =>
                        {
                            t.HasCheckConstraint("goods_receipt_line_chk_1", "qty_received > 0");

                            t.HasCheckConstraint("goods_receipt_line_chk_2", "unit_cost >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.Invoice", b =>
                {
                    b.Property<long>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("InvoiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(14,2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(14,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("invoice", t =>
                        {
                            t.HasCheckConstraint("invoice_chk_1", "total_amount >= 0");

                            t.HasCheckConstraint("invoice_chk_2", "tax_amount >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.MonthlyRevenueRow", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("MonthlyRevenueRows");
                });

            modelBuilder.Entity("BookStore.Api.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("approved_by");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long?>("DeliveredBy")
                        .HasColumnType("bigint")
                        .HasColumnName("delivered_by");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("placed_at");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("receiver_name");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("receiver_phone");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("shipping_address");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("OrderId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveredBy");

                    b.ToTable("order");
                });

            modelBuilder.Entity("BookStore.Api.Models.OrderLine", b =>
                {
                    b.Property<long>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_line_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("OrderLineId"));

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderLineId");

                    b.HasIndex("Isbn");

                    b.HasIndex("OrderId");

                    b.ToTable("order_line", t =>
                        {
                            t.HasCheckConstraint("order_line_chk_1", "qty > 0");

                            t.HasCheckConstraint("order_line_chk_2", "unit_price >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.PaymentTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CheckoutUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("checkout_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderTxnId")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("provider_txn_id");

                    b.Property<string>("RawRequest")
                        .HasColumnType("json")
                        .HasColumnName("raw_request");

                    b.Property<string>("RawResponse")
                        .HasColumnType("json")
                        .HasColumnName("raw_response");

                    b.Property<string>("ReturnUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("return_url");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("TransactionId");

                    b.ToTable("payment_transaction");
                });

            modelBuilder.Entity("BookStore.Api.Models.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PermissionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("permission");
                });

            modelBuilder.Entity("BookStore.Api.Models.PriceChange", b =>
                {
                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("new_price");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("old_price");

                    b.HasKey("Isbn", "ChangedAt");

                    b.HasIndex("EmployeeId");

                    b.ToTable("price_change", (string)null);
                });

            modelBuilder.Entity("BookStore.Api.Models.Promotion", b =>
                {
                    b.Property<long>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("promotion_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PromotionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount_pct");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<long>("IssuedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("issued_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("PromotionId");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("promotion", t =>
                        {
                            t.HasCheckConstraint("promotion_chk_1", "discount_pct > 0 AND discount_pct < 100");

                            t.HasCheckConstraint("promotion_chk_2", "start_date <= end_date");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.Publisher", b =>
                {
                    b.Property<long>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PublisherId"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone");

                    b.HasKey("PublisherId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("publisher");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrder", b =>
                {
                    b.Property<long>("PoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("po_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PoId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("OrderFileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("order_file_url");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ordered_at");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasKey("PoId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PublisherId");

                    b.HasIndex("StatusId");

                    b.ToTable("purchase_order");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrderLine", b =>
                {
                    b.Property<long>("PoLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("po_line_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PoLineId"));

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<long>("PoId")
                        .HasColumnType("bigint")
                        .HasColumnName("po_id");

                    b.Property<int>("QtyOrdered")
                        .HasColumnType("int")
                        .HasColumnName("qty_ordered");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("PoLineId");

                    b.HasIndex("Isbn");

                    b.HasIndex("PoId");

                    b.ToTable("purchase_order_line", t =>
                        {
                            t.HasCheckConstraint("purchase_order_line_chk_1", "qty_ordered > 0");

                            t.HasCheckConstraint("purchase_order_line_chk_2", "unit_price >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrderStatus", b =>
                {
                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("StatusId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("purchase_order_status");
                });

            modelBuilder.Entity("BookStore.Api.Models.QuarterlyRevenueRow", b =>
                {
                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("QuarterlyRevenueRows");
                });

            modelBuilder.Entity("BookStore.Api.Models.Rating", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("rating_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("RatingId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("isbn");

                    b.Property<int>("Stars")
                        .HasColumnType("int")
                        .HasColumnName("stars");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("RatingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Isbn", "CustomerId")
                        .IsUnique();

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("BookStore.Api.Models.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("return_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("ReturnId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("processed_at");

                    b.Property<long?>("ProcessedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("processed_by");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("ReturnId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProcessedBy");

                    b.ToTable("return");
                });

            modelBuilder.Entity("BookStore.Api.Models.ReturnLine", b =>
                {
                    b.Property<long>("ReturnLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("return_line_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("ReturnLineId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("amount");

                    b.Property<long>("OrderLineId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_line_id");

                    b.Property<int>("QtyReturned")
                        .HasColumnType("int")
                        .HasColumnName("qty_returned");

                    b.Property<long>("ReturnId")
                        .HasColumnType("bigint")
                        .HasColumnName("return_id");

                    b.HasKey("ReturnLineId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ReturnId");

                    b.ToTable("return_line", t =>
                        {
                            t.HasCheckConstraint("return_line_chk_1", "qty_returned > 0");

                            t.HasCheckConstraint("return_line_chk_2", "amount >= 0");
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            Description = "Khách hàng",
                            Name = "CUSTOMER"
                        },
                        new
                        {
                            RoleId = 2L,
                            Description = "Nhân viên",
                            Name = "EMPLOYEE"
                        },
                        new
                        {
                            RoleId = 3L,
                            Description = "Quản trị viên",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("BookStore.Api.Models.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permission");
                });

            modelBuilder.Entity("BookStore.Api.Models.Account", b =>
                {
                    b.HasOne("BookStore.Api.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookStore.Api.Models.AuthorBook", b =>
                {
                    b.HasOne("BookStore.Api.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_book_author");

                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_book_book");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Api.Models.Book", b =>
                {
                    b.HasOne("BookStore.Api.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_category");

                    b.HasOne("BookStore.Api.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_publisher");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStore.Api.Models.BookPromotion", b =>
                {
                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("BookPromotions")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookpromotion_book");

                    b.HasOne("BookStore.Api.Models.Promotion", "Promotion")
                        .WithMany("BookPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookpromotion_promotion");

                    b.Navigation("Book");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BookStore.Api.Models.Cart", b =>
                {
                    b.HasOne("BookStore.Api.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStore.Api.Models.CartItem", b =>
                {
                    b.HasOne("BookStore.Api.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BookStore.Api.Models.Customer", b =>
                {
                    b.HasOne("BookStore.Api.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("BookStore.Api.Models.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cus_account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BookStore.Api.Models.Employee", b =>
                {
                    b.HasOne("BookStore.Api.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("BookStore.Api.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_emp_account");

                    b.HasOne("BookStore.Api.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_emp_department");

                    b.Navigation("Account");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BookStore.Api.Models.EmployeeArea", b =>
                {
                    b.HasOne("BookStore.Api.Models.Area", "Area")
                        .WithMany("EmployeeAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_area_area");

                    b.HasOne("BookStore.Api.Models.Employee", "Employee")
                        .WithMany("EmployeeAreas")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_area_employee");

                    b.Navigation("Area");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BookStore.Api.Models.GoodsReceipt", b =>
                {
                    b.HasOne("BookStore.Api.Models.Employee", "CreatedByEmployee")
                        .WithMany("CreatedGoodsReceipts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gr_employee");

                    b.HasOne("BookStore.Api.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("GoodsReceipts")
                        .HasForeignKey("PoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gr_po");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("BookStore.Api.Models.GoodsReceiptLine", b =>
                {
                    b.HasOne("BookStore.Api.Models.GoodsReceipt", "GoodsReceipt")
                        .WithMany("GoodsReceiptLines")
                        .HasForeignKey("GrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grl_gr");

                    b.Navigation("GoodsReceipt");
                });

            modelBuilder.Entity("BookStore.Api.Models.Invoice", b =>
                {
                    b.HasOne("BookStore.Api.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookStore.Api.Models.Order", b =>
                {
                    b.HasOne("BookStore.Api.Models.Employee", "ApprovedByEmployee")
                        .WithMany("ApprovedOrders")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("fk_order_approved_by");

                    b.HasOne("BookStore.Api.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_customer");

                    b.HasOne("BookStore.Api.Models.Employee", "DeliveredByEmployee")
                        .WithMany("DeliveredOrders")
                        .HasForeignKey("DeliveredBy")
                        .HasConstraintName("fk_order_delivered_by");

                    b.Navigation("ApprovedByEmployee");

                    b.Navigation("Customer");

                    b.Navigation("DeliveredByEmployee");
                });

            modelBuilder.Entity("BookStore.Api.Models.OrderLine", b =>
                {
                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("OrderLines")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ol_book");

                    b.HasOne("BookStore.Api.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ol_order");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookStore.Api.Models.PriceChange", b =>
                {
                    b.HasOne("BookStore.Api.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_change_employee");

                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("PriceChanges")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_change_book");

                    b.Navigation("Book");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BookStore.Api.Models.Promotion", b =>
                {
                    b.HasOne("BookStore.Api.Models.Employee", "IssuedByEmployee")
                        .WithMany("IssuedPromotions")
                        .HasForeignKey("IssuedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promotion_employee");

                    b.Navigation("IssuedByEmployee");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrder", b =>
                {
                    b.HasOne("BookStore.Api.Models.Employee", "CreatedByEmployee")
                        .WithMany("CreatedPurchaseOrders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_po_employee");

                    b.HasOne("BookStore.Api.Models.Publisher", "Publisher")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_po_publisher");

                    b.HasOne("BookStore.Api.Models.PurchaseOrderStatus", "Status")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_purchase_order_status");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Publisher");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrderLine", b =>
                {
                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pol_book");

                    b.HasOne("BookStore.Api.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pol_po");

                    b.Navigation("Book");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("BookStore.Api.Models.Rating", b =>
                {
                    b.HasOne("BookStore.Api.Models.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rating_customer");

                    b.HasOne("BookStore.Api.Models.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rating_book");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStore.Api.Models.Return", b =>
                {
                    b.HasOne("BookStore.Api.Models.Invoice", "Invoice")
                        .WithMany("Returns")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_return_invoice");

                    b.HasOne("BookStore.Api.Models.Employee", "ProcessedByEmployee")
                        .WithMany()
                        .HasForeignKey("ProcessedBy");

                    b.Navigation("Invoice");

                    b.Navigation("ProcessedByEmployee");
                });

            modelBuilder.Entity("BookStore.Api.Models.ReturnLine", b =>
                {
                    b.HasOne("BookStore.Api.Models.OrderLine", "OrderLine")
                        .WithMany("ReturnLines")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rl_order_line");

                    b.HasOne("BookStore.Api.Models.Return", "Return")
                        .WithMany("ReturnLines")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rl_return");

                    b.Navigation("OrderLine");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("BookStore.Api.Models.RolePermission", b =>
                {
                    b.HasOne("BookStore.Api.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rp_permission");

                    b.HasOne("BookStore.Api.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rp_role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookStore.Api.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BookStore.Api.Models.Area", b =>
                {
                    b.Navigation("EmployeeAreas");
                });

            modelBuilder.Entity("BookStore.Api.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("BookStore.Api.Models.Book", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("BookPromotions");

                    b.Navigation("OrderLines");

                    b.Navigation("PriceChanges");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BookStore.Api.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BookStore.Api.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Api.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BookStore.Api.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BookStore.Api.Models.Employee", b =>
                {
                    b.Navigation("ApprovedOrders");

                    b.Navigation("CreatedGoodsReceipts");

                    b.Navigation("CreatedPurchaseOrders");

                    b.Navigation("DeliveredOrders");

                    b.Navigation("EmployeeAreas");

                    b.Navigation("IssuedPromotions");
                });

            modelBuilder.Entity("BookStore.Api.Models.GoodsReceipt", b =>
                {
                    b.Navigation("GoodsReceiptLines");
                });

            modelBuilder.Entity("BookStore.Api.Models.Invoice", b =>
                {
                    b.Navigation("Returns");
                });

            modelBuilder.Entity("BookStore.Api.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("BookStore.Api.Models.OrderLine", b =>
                {
                    b.Navigation("ReturnLines");
                });

            modelBuilder.Entity("BookStore.Api.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BookStore.Api.Models.Promotion", b =>
                {
                    b.Navigation("BookPromotions");
                });

            modelBuilder.Entity("BookStore.Api.Models.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrder", b =>
                {
                    b.Navigation("GoodsReceipts");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("BookStore.Api.Models.PurchaseOrderStatus", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("BookStore.Api.Models.Return", b =>
                {
                    b.Navigation("ReturnLines");
                });

            modelBuilder.Entity("BookStore.Api.Models.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
